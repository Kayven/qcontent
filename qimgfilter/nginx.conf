
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';

#access_log  logs/access.log  main;

    sendfile        on;
#tcp_nopush     on;

#keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream snapshot {
        postgres_server localhost dbname=snapshot user=postgre password=;
        postgres_keepalive      max=80 mode=single overflow=reject;
    }

    server {
        listen       8019;
        server_name  l-dev1.s.cn5;
        default_type text/html;
        charset UTF-8;

#access_log  logs/host.access.log  main;

        location /snapshot {
            set_unescape_uri $url $arg_url;
            set_unescape_uri $query $arg_query;

            if ($url !~ '\S') {
                rds_json_ret 400 "Bad \"url\" argument";
            }
            if ($query !~ '\S') {
                rds_json_ret 400 "Bad \"query\" argument";
            }
            set_quote_sql_str $url;
            set_quote_sql_str $query;

            postgres_pass    snapshot;
            postgres_query   "select fetch_snapshot($url, $query);";
            postgres_output value 0 0;
        }

        location /img {
            xss_get on;
            xss_callback_arg 'callback';
            default_type application/json;
            rds_json on;

            charset UTF-8;

            set_unescape_uri $md5s $arg_md5s;

            if ($md5s !~ '\S') {
                rds_json_ret 400 "Bad \"md5s\" argument";
            }

            array_split ',' $md5s to=$array;
            array_map_op set_quote_sql_str $array;
            array_join ' , ' $array to=$md5_array;

            if ($http_user_agent ~ MSIE ) {
                postgres_pass    snapshot;
                postgres_query "select md5, url, raw_width * 80 / raw_height as thumb_width, 80 as thumb_height, '' as alt, 'http://l-dev1.s.cn5.qunar.com:8019/thumb/' || md5 || '.jpg' as thumb_base64 from thumb_imgs where md5 in ($md5_array)";
            }

            if ($http_user_agent !~ MSIE ) {
                postgres_pass    snapshot;
                postgres_query "select md5, url, raw_width * 80 / raw_height as thumb_width, 80 as thumb_height, '' as alt, thumb_base64 from thumb_imgs where md5 in ($md5_array)";
            }
        }

        location ~ '^/thumb/(\w+).jpg' {
            set $md5 $1;

            default_type image/jpeg;
            set_quote_sql_str $md5;

            postgres_binary_mode on;
            postgres_pass  snapshot;

            postgres_query "select thumb_content from thumb_imgs where md5 = $md5";
            postgres_output value 0 0;
        }
            

#error_page  404              /404.html;

# redirect server error pages to the static page /50x.html
#
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
    }


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443;
#    server_name  localhost;

#    ssl                  on;
#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_timeout  5m;

#    ssl_protocols  SSLv2 SSLv3 TLSv1;
#    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
#    ssl_prefer_server_ciphers   on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

}
